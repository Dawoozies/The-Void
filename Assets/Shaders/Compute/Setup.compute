// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel StartTextureSetup

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
uint ScreenWidth;
uint ScreenHeight;
Texture2D<float4> StartTexture;
RWTexture2D<float4> OutputTexture;

[numthreads(8,8,1)]
void StartTextureSetup (uint3 id : SV_DispatchThreadID)
{
	//OutputTexture[id.xy] = StartTexture[id.xy];
	//Initial
	/*OutputTexture[uint2(ScreenWidth/2,ScreenHeight/2)] = float4(1,1,1,1);
	OutputTexture[uint2(ScreenWidth/2+1,ScreenHeight/2)] = float4(1,1,1,1);
	OutputTexture[uint2(ScreenWidth/2,ScreenHeight/2+1)] = float4(1,1,1,1);

	OutputTexture[uint2(ScreenWidth/2+10,ScreenHeight/2+10)] = float4(1,1,1,1);
	OutputTexture[uint2(ScreenWidth/2+1+10,ScreenHeight/2+10)] = float4(1,1,1,1);
	OutputTexture[uint2(ScreenWidth/2+10,ScreenHeight/2+1+10)] = float4(1,1,1,1);
	
	   Any live cell with fewer than two live neighbours dies, as if by underpopulation.
    Any live cell with two or three live neighbours lives on to the next generation.
    Any live cell with more than three live neighbours dies, as if by overpopulation.
    Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
	
	
	
	
	
	
	*/
	/*for (int i = -100; i < 100; i++) {
		
		for (int j = -100; j < 100; j++) {

		OutputTexture[uint2(ScreenWidth/2+i,ScreenHeight/2+j)] = float4(1-((i+100)/200.0),1,1-((j+100)/200.0),1);
		}
	}*/
}
