// SimpleComputeShader.compute
#pragma kernel Life
float ScreenWidth;
float ScreenHeight;
Texture2D<float4> StartTexture;
float StartTextureWidth;
float StartTextureHeight;
bool startPass;
Texture2D<float4> InputTexture;
RWTexture2D<float4> OutputTexture;

uint pixelWidth;
uint pixelHeight;

float startTime;
float currentTime;
uint previousPixel;


float translationVectorX;
float translationVectorY;
float random( float2 uv )
{
    return frac( cos( dot(uv,float2(23.14069263277926,2.665144142690225))) * 12345.6789 );
}
[numthreads(8, 8, 1)]
void Life(uint3 id : SV_DispatchThreadID)
{
    //float2 position = float2((id.x) / Width, (id.y) / Height);
	//float2 pixelSize = float2(1.0 / Width, 1.0 / Height);
    //float4 currentPixel = InputTexture[position];
    //float4 neighborPixels = float4(0,0,0,0);

    //OutputTexture[id.xy - uint2(1,1)] = float4(0,0,0,0);
    //OutputTexture[id.xy] += InputTexture[id.xy+uint2(1,1)];
    //float2 randomUV = float2(random(id.xy*currentTime), random(id.xy*currentTime));
    //uint2 randomPixel = uint2(randomUV.x*ScreenWidth, randomUV.y*ScreenHeight);
    //
    //OutputTexture[id.xy] = 
    //uint2 newPixelTranslation = floor(float2(id.xy)+translation); 
    //float4 pixelColor = StartTexture[id.xy + newPixelTranslation];
    //OutputTexture[id.xy] += pixelColor;
    //OutputTexture[id.xy + newPixelTranslation] *= pixelColor;
    //OutputTexture[id.xy] = StartTexture[randomPixel];
    //OutputTexture[randomPixel] = StartTexture[randomPixel];
    //float2 translationVector = float2(translationVectorX, translationVectorY);
    //uint2 translation = floor(float2(currentTime,currentTime)*translationVector);
    //OutputTexture[id.xy+translation] = StartTexture[id.xy];
    //OutputTexture[id.xy-translation] = StartTexture[id.xy+translation];

    //static Texture2D<float4>

    /*float rr = random(float2(
        0.1234,   
        ((0.17 * id.x) + (0.667 * id.y) + (0.99 * currentTime)) % 1

    ));
    float rg = random(float2(
        0.345,     
        ((0.875 * id.x) + (0.56 * id.y) + (0.65 * currentTime)) % 1

    ));
    float rb = random(float2(
        0.456,
        ((0.3456 * id.x) + (0.432 * id.y) + (0.345 * currentTime)) % 1
    ));
    /*
	OutputTexture[id.xy] = float4(
        (id.x/2 + currentTime) % 1,
        ((id.x/2 + id.y/2)/2 + currentTime)%1,
        (id.y/2 + currentTime) % 1,
        1
    );
    */
    //Static with holes
    //OutputTexture[id.xy + ceil(id.xy*random(id.xy))] = float4(rr,rg,rb,1);
   // OutputTexture[id.xy + ceil(id.xy*random(id.xy))] = float4(rr,rg,rb,1);
   // OutputTexture[id.xy - floor(id.xy*random(id.xy))] = float4(rr,rg,rb,1);
   
uint offsetX = 550;
uint offsetY = 300;
   
float4 one = float4(1, 1, 1, 1);
float4 zero = float4(0, 0, 0, 0);

    if ((id.x < 10) || (id.x > ((uint)ScreenWidth - 10)) || (id.y < 10) || (id.y > ((uint)ScreenHeight - 10))) {
       //OutputTexture[id.xy] = float4(1, 0.5, 0, 1);
        return;
    }
    /*
   if (currentTime == 0.0) {
       if ((id.x >= offsetX) &&
           (id.x <= offsetX+9) && 
           (id.y >= offsetY) && 
           (id.y <= offsetY+12)
       ){
           OutputTexture[id.xy] = one;
           return;
       }
    }
    */
    if(currentTime == 0.0)
    {
        if(id.x == id.y)
        {
            OutputTexture[id.xy] = one;
            return;
        }
        if(id.x == 0)
        {
            OutputTexture[id.xy] = one;
            return;
        }
        if(id.y == (uint)ScreenHeight/2)
        {
            OutputTexture[id.xy] = one;
            return;
        }
    }
    // OutputTexture[id.xy] = float4(0.8, 0.1, 0.61, 1);
    /*
    if (currentTime == 0.0) {
        if (
            (id.x == offsetX+0 && id.y == offsetY) ||
            (id.x == offsetX+1 && id.y == offsetY) ||
            (id.x == offsetX+2 && id.y == offsetY) ||
            (id.x == offsetX+1 && id.y == offsetY+1) ||
            (id.x == offsetX+2 && id.y == offsetY+1) ||
            (id.x == offsetX+3 && id.y == offsetY+1)
            ) {
                OutputTexture[id.xy] = one;
                return;
            }
            OutputTexture[id.xy] = zero;
            return;
    }
    */
    /*
    uint sum = 0;
    for (int i = -1; i <= 1; i++){
        for (int j = -1; j <= 1; j++){
            if (i==0 && j==0) {
                sum += 0;
            }
            else {
                sum += (InputTexture[uint2(id.x+i, id.y+j)].r > 0) ? 1 : 0;
            }
        }
    }
    */
    uint sum = 0;
    sum += InputTexture[uint2(id.x-1,id.y-1)].r;
    sum += InputTexture[uint2(id.x-1,id.y)].r;
    sum += InputTexture[uint2(id.x-1,id.y+1)].r;

    sum += InputTexture[uint2(id.x+1,id.y-1)].r;
    sum += InputTexture[uint2(id.x+1,id.y)].r;
    sum += InputTexture[uint2(id.x+1,id.y+1)].r;

    sum += InputTexture[uint2(id.x,id.y-1)].r;
    sum += InputTexture[uint2(id.x,id.y+1)].r;
    //OutputTexture[id.xy] = float4(sum / 8.0, 0, 1 - (sum / 8.0), 1);
    //return;
    if (InputTexture[id.xy].r > 0) {
         OutputTexture[id.xy] = (sum == 2 || sum == 3) ? one : zero;
    } else {
         OutputTexture[id.xy] = (sum == 3) ? one : zero;
    }
}
