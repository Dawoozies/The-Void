// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4 MainColor;

struct Circle
{
    float radius;
    float center;
    float smooth;
};

StructuredBuffer<Circle> CircleBuffer;
//Texture2D<float4> ColTex;
//SamplerState sampler_ColTex;
float CircleShape(float2 p, float center, float radius, float smooth)
{
    float c = length(p - center);
    return smoothstep(c - smooth, c + smooth, radius);
}
[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    uint width;
    uint height;
    Result.GetDimensions(width, height);
    float2 uv = float2((id.xy+0.5)/float2(width,height));
    //float4 col = ColTex.SampleLevel(sampler_ColTex, uv, 0);

    float center = CircleBuffer[id.x].center;
    float radius = CircleBuffer[id.x].radius;
    float smooth = CircleBuffer[id.x].smooth;

    float c = CircleShape(uv, center, radius, smooth);

    Result[id.xy] = float4(c, c, c, 1);
}
